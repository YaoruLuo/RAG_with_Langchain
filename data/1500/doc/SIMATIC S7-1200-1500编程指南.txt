SIMATIC S7-1200/1500  编程指南 

法律信息 应用实例的使用

应用实例说明了通过文本、图形和/或软件模块形式的几个组件的交互来实现自动化任务的解决方案。应用实例是由西门子公司和/或西门子公司的子公司（“西门子”）提供的免费服务。它们是非约束性的，并且不对配置和设备的完整性或功能性做出任何声明。应用程序示例仅对典型任务提供帮助;它们不构成针对客户的解决方案。您自己有责任按照适用的规定正确和安全地操作产品，并必须检查相应应用示例的功能，并为您的系统定制应用示例。西门子授予您非排他性、不可再授权和不可转让的权利，让经过技术培训的人员使用应用示例。对应用程序示例的任何更改均由您负责。与第三方共享应用程序示例或复制应用程序示例或摘录，只有在与您自己的产品组合时才允许。应用实例不要求经过收费产品的惯常测试和质量检验，它们可能有功能和性能缺陷以及错误。您有责任以可能发生的任何故障不会导致财产损失或人员伤害的方式使用它们。

免责声明

无论何种法律原因，西门子均不承担任何责任，包括但不限于对应用示例的可用性、有效性、完整性和无缺陷以及相关信息、配置和性能数据以及由此造成的任何损害承担任何责任。这个不适用强制责任的情况下，例如，根据《德国产品责任法》，或在存在故意、重大过失、应负责任的生命损失、身体伤害或健康损害、不遵守保证、欺诈性不披露缺陷或应负责任的重大合同义务的情况下。但是，因违反重大合同义务而引起的损害索赔应限于典型协议类型的可预见损害，除非责任是由于故意或重大过失或基于生命损失、身体伤害或健康损害而引起的。上述条款并不意味着对损害贵方利益的举证责任有任何改变。除非西门子被强制承担责任，否则贵方应向西门子赔偿目前或未来第三方就此提出的索赔。


其他信息

西门子保留在不另行通知的情况下随时对应用实例进行更改的权利。如果应用示例中的建议与其他西门子出版物(如目录)之间存在差异，应以其他文件的内容为准。西门子使用条款(https://support.industry.siemens.com)也应适用。

安全信息

西门子提供工业安全功能的产品和解决方案，支持工厂、系统、机器和网络的安全运行。

为了保护工厂、系统、机器和网络免受网络威胁，有必要实施并持续维护一个整体的、最先进的工业安全概念。西门子的产品和解决方案构成了这一概念的一个要素。

客户有责任防止未经授权访问其工厂、系统、机器和网络。该等系统、机器及组件只应在有必要及有适当的保安措施(例如防火墙及/或网络分段)的情况下，才可连接到企业网络或互联网。

有关可能实施的工业安全措施的更多信息，请访问 https://www.siemens.com/industrialsecurity。

西门子的产品和解决方案不断发展，使其更加安全。西门子强烈建议，一旦产品更新可用，就应用最新的产品版本。使用不再受支持的产品版本，以及未能应用最新更新，可能增加客户遭受网络威胁的风险。

要了解产品更新，请订阅西门子工业安全RSS: https://www.siemens.com/industrialsecurity。

1 前言

开发新一代 SIMATIC 控制器的目标

适用于所有自动化组件（控制器、HMI、驱动器等）的工程框架、统一编程、提高性能、每种语言的完整命令集、完全符号程序生成、不需要指针的数据处理、创建块的可重用性

指南的目标

新一代控制器 SIMATIC S7-1200 和 S7-1500 具有最新的系统架构，并且与TIA博途一起提供了新的高效编程和配置选项。最重要的不再是控制器的资源（例如内存中的数据存储），而是实际的自动化解决方案本身。

本文档为您提供了许多有关S7-1200/1500控制器优化编程的建议和注意事项。S7-300/400系统架构的一些差异以及与此关联的新编程选项以易于理解的方式进行了解释。这有助于您为自动化解决方案创建标准化和优化的编程。

所描述的示例可普遍用于控制器 S7-1200 和 S7-1500。


优势和好处

应用这些建议和技巧可带来许多优势：

强大的用户程序 • 清晰的程序结构 • 直观有效的编程解决方案


在对 SIMATIC 控制器进行编程时，程序员的任务是创建尽可能清晰易读的用户程序。每个用户都使用自己的策略，例如，如何命名变量或块或注释方式。程序员的不同理念创建了非常不同的用户程序，只能由各自的程序员解释。

编程风格指南为您提供了一组协调一致的编程规则。例如，为了在 SCL 进行清晰的编程，这些规范描述了统一的变量和块的命名规则。

您可以自由地使用这些规则和建议；它们仅作为标准化编程的建议（不是编程标准）。注意 S7-1200 和 S7-1500 的编程风格指南可在以下链接中找到：https://support.industry.siemens.com/cs/ww/en/view/81318674


2 通用编程 

2.1 操作系统与用户程序

S7-1200/S7-1500 创新

一般来说，从 S7-300/400 到 S7-1500 的 SIMATIC 控制器的编程保持不变。有熟知的编程语言，例如 LAD、FBD、STL、SCL 或 GRAPH，以及熟知的块，例如组织块(OB)、函数块(FB)、函数(FC)或数据块(DB)。在 S7-300/400 中创建的程序可以轻松的在 S7-1500 上执行，且现有的 LAD、FBD 和 SCL 程序可以轻松的在 S7-1200 控制器上执行。此外，还有许多创新可以方便您进行编程并实现功能强大且节省内存的代码。

对于为 S7-1200/1500 控制器执行的程序，我们建议不仅要一个一个地执行它们，也要检查新选项，并在可能的情况下使用它们。通常很少的额外的工作，但将获得一个程序代码包括，最适合新 CPU 的内存和运行时间，更容易理解，并且更容易维护。有关将 S7-300/S7-400 移植到 S7-1500 的信息，请参见以下条目：https://support.industry.siemens.com/cs/ww/en/view/109478811

2.2 术语

TIA 博途中的通用术语

某些术语已更改，以便更轻松地使用 TIA 博途进行处理。

2.3 操作系统与用户程序

互联网上有哪些条目可用于移植到 STEP 7(TIA 博途)和 WinCC(TIA 博途)？ https://support.industry.siemens.com/cs/ww/en/view/56314851。

在 STEP 7 Professional(TIA 博途)中移植 STEP 7 V5.x 项目必须满足哪些系统要求？ https://support.industry.siemens.com/cs/ww/en/view/62100731。

使用 STEP 7(TIA 博途)将 PLC 移植到 S7-1500？ https://support.industry.siemens.com/cs/ww/en/view/67858106。

如何在 STEP 7(TIA 博途)中为 S7-1200/S7-1500 高效地编程？ https://support.industry.siemens.com/cs/ww/en/view/67582299。

为什么对于 S7-1500 在 STEP 7 (TIA 博途) 中寄存器传递和实参传输不能混用？本条目还介绍了将 STL 程序移植到 S7-1500。https://support.industry.siemens.com/cs/ww/en/view/67655405。


不同的编程语言可用于用户程序的编程。每种语言都有自己的优势，可以根据应用灵活使用。因此，用户程序中的每个块都可以用任何编程语言创建。

SIMATIC S7-1200/S7-1500 基于国际助记符的编程语言比较列表： https://support.industry.siemens.com/cs/ww/en/view/86630375。
在 STEP 7(TIA 博途)中移植 S7-SCL 程序时应注意什么？ https://support.industry.siemens.com/cs/ww/en/view/59784005。
在 STEP 7(TIA 博途)的 SCL 程序中不能使用哪些指令？ https://support.industry.siemens.com/cs/ww/en/view/58002709。
如何在 STEP 7(TIA 博途)中定义 S7-SCL 程序中的常量？ https://support.industry.siemens.com/cs/ww/en/view/52258437。


2.4 优化的机器代码

TIA 博途和 S7 -1200/1500 可在每种编程语言中实现优化运行时的性能。所有语言都以相同的方式直接编译成机器代码。

优点，所有编程语言都具有相同的性能水平（对于相同的访问类型），对于通过 STL 中间步骤的额外编译不会降低性能。


2.5 创建块

所有块，例如 OB、FB 和 FC，都可以直接用所需的编程语言进行编程。因此，不必 为 SCL 编程创建源文件。只需要选择块并将 SCL 作为编程语言，然后可以直接对块进行编程。

S7-1200/1500 控制器具有优化的数据存储。在优化块中，所有变量都会根据其数据 类型自动排序。排序确保变量之间的数据间隙减少到最小，并且变量为处理器的访问优化存储。

非优化块仅出于兼容性原因用于 S7-1200/1500 控制器中。优点，访问总是尽可能快地进行，因为数据存储由系统优化并且不依赖于声明。没有由于错误的绝对访问而导致不一致的危险，因为访问通常是符号化的。声明更改不会导致访问错误，因为例如 HMI 访问是符号化的。单个变量可以单独定义为保持变量。背景数据块中不需要设置。一切都在分配的 FB 中设置（例如，保持性）。数据块中的存储保护区可以在不丢失当前值的情况下进行更改。

特性：由于较大的变量位于块的开头，较小的变量位于块的末尾，因此不会形成数据间隙。由于处理器优化存储，访问速度更快（所有变量都以某种方式存储，以便 S7- 1500 的处理器只需一个机器命令即可直接读取或写入它们）。布尔变量以字节形式存储以便更快地访问。因此，控制器不必以掩码方式访问。优化块有一个存储预留区用于在运行操作中加载。优化块只有符号访问。

出于与第一代 SIMATIC 控制器兼容的原因，S7-300/400 控制器接受了“大端”数 据存储原则。

基于改变的处理器架构，新一代 S7-1500 控制器始终以“小端”顺序访问 4 个字节 （32 位）。

推荐

• 一般来说，只使用优化块。

– 您不需要绝对寻址，并且始终可以使用符号数据（与对象相关）进行寻址。也可以使用符号数据进行间接寻址。

– 在控制器中处理优化块比标准块快得多。

• 避免在优化和非优化块之间复制/赋值数据。源格式和目标格式之间的数据转换需要很长的处理时间。

默认情况下，为 S7 -1200/1500 的所有新创建的块启用优化块访问。可为 OB、FB 和全局 DB 设置块访问。对于背景 DB，设置来自各自的 FB。如果将块从 S7-300/400 控制器移植到 S7-1200/1500，块访问不会自动复位设置。您可以稍后将块访问更改为“优化块访问”。更改块访问后，您必须重新编译程序。如果将 FB 更改为“优化块访问”，其分配的背景数据块将自动更新。按照说明设置优化块访问。

对于全局 DB，存在相同的差异。
全局 DB 变量的掉电保持性直接在全局 DB 中定义。默认情况下，预设的是掉电不保持。

在函数块（而不是背景 DB）的实例中定义变量的掉电保持性。因此，这些设置对于该 FB 的所有实例都有效。

优化和非优化数据块的访问类型

更多信息可以在以下条目中找到：

在 STEP 7(TIA 博途) 中可以使用哪些访问类型来访问块中的数据值，您应该意类型之间的差异有哪些？ https://support.industry.siemens.com/cs/ww/en/view/67655611。

在使用经过优化访问的 DB 时，应注意 STEP 7(TIA 博途)中指令“READ_DBL”和“WRIT_DBL”的哪些属性？ https://support.industry.siemens.com/cs/ww/en/view/51434747。

2.6.4 优化和非优化变量之间的转换

通常建议使用优化的变量。但是，如果在个别情况下希望保留原有的程序，程序中可混合使用优化和非优化的数据存储。

系统知道每个变量的内部存储，无论是结构化的（源自单独定义的数据类型）还是基本的（INT、LREAL、...）。在不同内存区域的相同类型的两个变量之间赋值，系统会自动转换。这种转换需要对变量结构化，因此应尽可能避免。

2.6.5 优化和非优化访问的块之间的参数传输

当将结构作为输入/输出参数 (InOut) 传输到被调用块时，它们默认作为引用传输。但是，如果其中一个块具有“优化访问”属性而另一个块具有“默认访问”属性，则情况并非如此。在这种情况下，所有参数通常作为副本传输。

在这种情况下，被调用块始终使用复制的值。在块处理期间，这些值可能会更改，并且在处理块调用后将它们复制回原始操作数。

如果原始操作数被异步进程（例如，被 HMI 或中断 OB 访问）更改，这可能会出问题。如果在块处理之后将复制的值复制回原始操作数，则原始操作数上异步执行的更改将被覆盖。

更多信息可以在以下条目中找到：

为什么 HMI 系统或 Web 服务器的数据有时会在 S7-1500 中被覆盖？https://support.industry.siemens.com/cs/ww/en/view/109478253。

推荐

• 始终为相互通信的两个块设置相同的访问类型。

2.6.6 使用优化数据通信

接口（CPU、CM）以排列方式传输数据（无论是优化还是非优化）。任何变量或数据块都可以用作数据记录（源自 PLC 数据类型）。

2.7 块属性

2.7.1 块大小

对于 S7-1200/1500 控制器，主存储器中块的最大尺寸明显增大。

推荐

将 S7-1500 控制器的 DB 用作大数据量的数据容器。您可以使用 S7-1500 控制器将>64kB的数据量存储在优化的 DB 中（最大大小16MB）。

2.7.2 组织块(OB)数量

使用 OB 可以创建用户程序层次结构。有不同的 OB 可供使用。从固件 V4 开始，可以有 4 个延时中断和 4 个循环中断。

推荐 使用 OB 以分层次构建用户程序。

2.7.3 块接口–隐藏块参数（V14或更高版本）

调用块时，块参数可以有针对性的显示或隐藏。在这里，有三个选项可以为每个形式参数单独配置。

“显示” • “隐藏” • “如果未分配参数则隐藏”

2.8 S7-1200/1500 的新数据类型

S7-1200/1500 控制器支持新的数据类型，使编程更加方便。使用新的 64 位数据类型，可以使用更大更精确的值。

在 STEP 7(TIA 博途)中，如何转换 S7-1200/1500 的数据类型？https://support.industry.siemens.com/cs/ww/en/view/48711306。

为什么在 STEP 7(TIA 博途) 中，在 SCL 中 DInt 的加法结果显示不正确？https://support.industry.siemens.com/cs/ww/en/view/98278626。

注意 更多信息可以在以下条目中找到：

在 STEP 7(TIA 博途)中，如何输入、读取和编辑 S7-300/S7-400/S7-1200/S7- 1500 CPU 模块的日期和时间？https://support.industry.siemens.com/cs/ww/en/view/43566349。
STEP 7 V5.5 和 TIA 博途中有哪些函数可用于处理数据类型 DT 和 DTL？https://support.industry.siemens.com/cs/ww/en/view/63900229。

借助数据类型 WCHAR 和 WSTRING 可以处理 Unicode 字符。

数据类型 VARIANT（S7-1500 和 S7-1200 的 V4.1 以上版本）

VARIANT 类型的参数是一个指针，可以指向不同数据类型的变量。与 ANY 指针相 比，VARIANT 是一个带有类型检测的指针。这意味着目标结构和源结构在运行时被检查，必须是相同的。

优点

集成的类型测试可防止错误访问。通过 VARIANT 变量符号寻址，代码更易阅读。代码效率更高，处理时间更短。VARIANT 指针显然比 ANY 指针更直观。在系统功能的帮助下，可以直接使用正确类型的 VARIANT 变量。可以灵活高效地传输不同结构的变量。

在必须使用 ANY 指针之前检查一下。在许多情况下，不再需要指针。

当数据类型仅在程序运行中确定时，仅将数据类型 VARIANT 用于间接寻址。使用数据类型 VARIANT 作为 InOut 形式参数来创建独立于实际参数数据类型的通用块。

– 使用 VARIANT 数据类型而不是 ANY 指针。由于集成的类型测试，可以尽早发现错误。由于符号寻址，程序代码可以很容易地理解。

– 使用 VARIANT 指令，例如，进行类型识别。

使用数组的索引而不是通过 ANY 寻址数组元素。

2.9 指令

TIA 博途为程序员提供了现成的指令（位逻辑、计时器、计数器、比较……）。

注意 更多函数可在以下条目中下载：

用于STEP 7(TIA 博途)和 S7-1200/S7-1500 的(LGFP)通用函数库 https://support.industry.siemens.com/cs/ww/en/view/109479728。

2.9.1 MOVE 指令

在 STEP 7(TIA 博途) 中，可以使用MOVE 指令。 MOVE_BLK_VARIANT 指令是 S7-1200/1500 的新指令。

一般需要区分 MOVE、MOVE_BLK 和 MOVE_BLK_VARIANT

– 使用 MOVE 指令复制完整的结构体。使用 MOVE_BLK 指令复制已知数据类型的数组的一部分。如果您希望复制具有仅在程序运行时才知道的数据类型的数组部分，请仅使用 MOVE_BLK_VARIANT 指令。

UMOVE_BLK：复制过程不能被操作系统的其他活动中断。因此，在处理“无中断复制数组”指令时，CPU 的报警反应时间可能会增加。

如何在 STEP 7(TIA 博途)中复制存储区和结构体数据？ https://support.industry.siemens.com/cs/ww/en/view/42603881。

借助 PLC 数据类型而不是“STRUCT”声明结构体 • 减少使用的结构体数量：

– 例如，避免对非常相似的结构体进行多次声明。将它们总结为一个单一的结构体。

– 当结构体的许多元素具有相同的数据类型时，如果可能，请使用此数据类型数组。

由于其复杂的算法，VARIANT 指令需要比直接指令更长的处理时间。

• 如果可能，不要在循环（FOR、WHILE…）中使用 VARIANT 指令，以防止不必要地增加循环时间。

• 不要通过使用循环元素来复制数组，而是直接赋值完整的数组。

2.9.3 RUNTIME 指令

“RUNTIME”指令测量整个程序、单个块或命令序列的运行时间。您可以在 LAD、 FBD、SCL 和 STL（仅限 S7-1500）中调用此指令。

使用 S7-1200/S7-1500，如何测量组织块的总循环时间？https://support.industry.siemens.com/cs/ww/en/view/87668055。

2.9.4 PLC 数据类型的变量比较（V14或更高版本）

可以检查相同 PLC 数据类型的两个变量值是否相同。

2.9.5 多重赋值（V14或更高版本）

优点，多重赋值可以优化多个变量的编程（例如，用于初始化）。

示例

# statFillLevel : = #statTemperature := #tempTemperature := 0.0;

# statFillLevel : = #statTemperature := #tempTemperature := 0.0;

2.10.1 编程编辑器

通过在程序中使用符号名称和注释，您可以使代码易于理解和阅读。完整的符号是与程序代码一起下载到控制器的，因此即使在没有离线项目可用的情况下也可以快速维护。

在程序中使用注释以提高可读性。即使网络已折叠，网络标题注释也是可见的。 • 以便于同事也可以立即理解程序的方式设计程序代码。在以下示例中，您可以看到用于在编辑器中注释程序的广泛选项。

在编程语言 SCL 和 STL 中，可以在每一行中用//进行注释。

示例

statFillingLevel : = statRadius * statRadius * PI * statHight ; //

有关详细信息，请参阅以下条目： 在 STEP 7(TIA 博途) 中，为什么在块编辑器中打开项目后不再显示文本、标题和注释？https://support.industry.siemens.com/cs/ww/en/view/41995518

2.10.2 监控表中的注释行

优点，为了更好的结构，可以在监控表中创建注释行。


2.11 系统常量

对于 S7-300/400 控制器，硬件和软件组件的识别由逻辑地址或诊断地址执行。对于 S7-1200/1500，识别是通过系统常量进行的。S7-1200/1500 控制器的所有硬件和软件组件（例如，接口、模块、OB...）都有自己的系统常量。系统常量是在 中央和分布式 I/O 的设备组态的设置期间自动创建的。

优点

• 可以通过模块名称而不是硬件标识来寻址。

推荐

• 分配与函数相关的模块名称，以便在编程过程中轻松识别模块。

注意，打开“设备组态”可以快速找到每个设备的系统常量。

2.12 用户常量

常量值可以通过用户常量的帮助保存。通常，控制器中有 OB、FC 和 FB 的局部常量和整个用户程序的全局常量。

优点

用户常量可用于更改全局或本地所有使用位置的常量值。使用用户常量，可以使程序更具可读性。

特性

本地用户常量在块接口中定义。全局用户常量在“PLC变量”中定义。用户程序仅可对用户常量读取访问。对于受专有技术保护的块，用户常量是不可见的。

2.13 操作系统与用户程序

使用用户常量来提高程序的可读性和集中可变性。

以下常见问题解答中提供了常量的另一个应用案例：

如何在 STEP 7(TIA 博途) 中转换变量的单位？ https://support.industry.siemens.com/cs/ww/en/view/61928891。

2.13 控制器和 HMI 变量的内部参考 ID

STEP 7、WinCC、Startdrive、Safety 等集成到 TIA 博途工程框架的联合数据库中。用户程序中的所有位置都会自动接受数据更改，无论更改是发生在控制器、触摸屏还是驱动器中。因此不会出现数据不一致的情况。

如果创建变量，TIA 博途会自动创建唯一的参考 ID。您无法查看或设置参考 ID。此过程是内部引用。更改变量（地址）时，参考 ID 保持不变。

注意 ID 在以下情况下会改变...

重命名变量。改变类型。删除变量。

优点

• 您可以在不改变内部关系的情况下重新连接变量。控制器、HMI和驱动器之间的通信也保持不变。

• 符号名称的长度对控制器和 HMI 之间的通讯负载没有影响。

特性

如果更改 PLC 变量的地址，则只需重新加载控制器，因为系统还使用参考 ID 在内部对系统进行寻址。无需重新加载 HMI 设备。

2.14 发生错误时的 STOP 模式

与 S7-300/400 相比，S7-1200/1500 导致“STOP”模式的条件更少。由于 TIA 博途中更改了一致性检查，大多数情况下已经可以预先防止 S7-1200/1500 控制器进入“STOP”模式。在 TIA 博途编译时已经检查了程序块的一致性。这种方法使 S7-1200/1500 控制器比其前代产品更能“容错”。

优点

只有三种故障情况会使 S7-1200/1500 控制器进入 STOP 模式。这使得错误管理的编程更加清晰和容易。

对 S7-1200/1500 错误的响应错误 OB： • 当超过控制器的最大循环时间时，操作系统会调用 OB80“时间错误中断”。 • 当程序执行期间发生错误时，操作系统会调用 OB121“编程错误”。此外，对于每个错误，都会在诊断缓冲区中自动创建一个条目。

对于 S7-1200/1500 控制器，还有其他可编程的错误 OB（诊断错误、模块机架故障等）。


3.1 操作系统与用户程序

SIMATIC 控制器由操作系统和用户程序组成。操作系统管理所有未与特定控制任务连接的函数和序列(例如：处理重启、更新过程映像、调用用户程序、错误处理、内存管理等)。操作系统是控制器不可分割的一部分。用户程序包括处理特定自动化任务所需的所有块。用程序块对用户程序进行编程，并加载到控制器上。

对于 SIMATIC 控制器，用户程序总是循环执行。在 STEP 7 中创建控制器后， “Main”循环 OB 已经存在于“程序块”文件夹中。该块由控制器处理，并被无限循环调用。

3.2 程序块

在 STEP 7(TIA 博途)中，有所有熟悉的块类型来自之前的 STEP 7 版本： • 组织块 • 函数块 • 函数 • 数据块 有经验的 STEP 7 用户会马上知道他们的方法，新用户可以很容易地熟悉编程。

优势

使用不同的块类型给你的程序一个清晰的结构。基于一个良好的和结构化的程序，你可以得到许多函数单元，它们可以在一个项目和其他项目中多次重复使用。这些函数单元通常只在不同的配置上有所不同。

3.2 操作系统与用户程序

结构化自动化任务。将工厂的整个功能划分为独立的区域，形成子函数单元。将这些函数单元再次划分为更小的单元和函数。直到得到可以多次使用并带有不同参数的函数。

指定函数单元之间的接口。为将要由“外部伙伴”交付的函数，定义独特的接口。

OB 是操作系统和用户程序之间的接口。它们由操作系统调用并控制。

控制器的启动行为 • 循环程序处理 • 中断控制程序处理 • 错误处理根据控制器的不同，可以使用许多不同的 OB 类型。

属性

OB 由控制器的操作系统调用。可以在一个程序中创建几个主 OB。OB 按 OB 号顺序被处理。

建议

• 将不同的程序部件封装到几个主 OB 中，这些程序部件在控制器之间可能是可替换的。

• 避免不同主 OB 之间的通信。由此可以相互独立地使用它们。如果您在各个主 OB 之间交换数据，请使用全局 DB。

• 将彼此属于对方的所有程序部分划分到文件夹中，并将它们存储在项目库或全局库中以供重新使用。

更多资料可参阅下列条目：

哪些组织块可以在 STEP 7(TIA 博途)中使用?https://support.industry.siemens.com/cs/ww/en/view/40654862。

FC 是没有循环数据存储的块。这就是为什么块的参数值不能保存到下一次调用，并且在调用时必须提供实际参数的原因。
FC 是没有循环数据存储的块。在非优化块中调用临时变量时，临时变量未被定义。在优化块中，该值始终预置为默认值(S7-1500 和 S7-1200 固件V4 及更高版本)。因此，由此产生的特性不是偶然的，而是可复现的特性。
为了永久保存 FC 的数据，可以使用全局数据块的功能。FC 可以有多个输出。函数值可以直接在 SCL 中的公式被再次使用。

更多资料可参阅下列各项：

对于 S7-1200/S7-1500 CPU 的一个函数，允许在 STEP 7(TIA 博途)中定义的最大参数个数是多少?https://support.industry.siemens.com/cs/ww/en/view/99412890。

3.2.3 函数块(FB)

FB 是具有循环数据存储的块，其中的值是永久存储的。循环数据存储在背景数据块中实现。

属性

FB 是具有循环数据存储的块。 • 在非优化块中调用临时变量时，未定义临时变量。在优化块中，该值始终预置为默认值(S7-1500 和 S7-1200 固件V4)。因此，由此产生的行为不是偶然的，而是可复现的。

• 静态变量保存每个周期的值。

建议

• 使用函数块来创建子程序和构造用户程序。函数块也可以在用户程序的不同位置被多次调用。这使得频繁重复的程序部分的编程更容易。

• 如果函数块在用户程序中多次应用，请使用单独的实例，最好是多重实例。

3.2.4 实例

函数块的调用被称为实例。实例正在使用的数据保存在背景数据块中。背景数据块总是根据 FB 接口中的规范创建的，因此不能在背景数据块中更改。背景数据块由一个包括输入、输出、InOut和静态接口的永久内存组成。临时变量存储在易失性存储器(L栈)中。L栈始终只对当前进程有效。也就是说，临时变量必须在每个周期中初始化。

属性

背景数据块总是被分配给 FB。背景数据块不需要在 TIA 博途中手动创建，而是可以在调用 FB 时自动创建。背景数据块的结构在相对应的 FB 中指定，并且只能在那里更改。

建议

某种程度在程序中，背景数据块的数据只能由相对应的 FB 更改。这就是如何保证块可以在所有类型的项目中被普遍使用。

3.2.5 多重实例

使用多重实例调用函数块可以将它们的数据存储在被调用函数块的背景数据块中。这意味着，如果在一个函数块中调用另一个函数块，它将其数据保存在更高级别 FB 的背景数据块中。因此，即使在传输调用块时，也要维护被调用块的功能性。

优势

可重用性。可以进行多个调用。更清晰的程序与更少的背景数据块。简单的程序复制。对于编程中的结构化是个好选择。

属性，多重实例是背景数据块中的内存区域。

建议

使用多重实例可以减少背景数据块的数量。创建可重复使用和清晰的用户程序。编写本地函数，例如定时器，计数器，边缘计算。

示例

如果你需要时间和计数器功能，使用“IEC 计时器”块和“IEC 计数器”块，而不是绝对地址的 SIMATIC 计时器。如果可能的话，在这里可以使用多重实例。因此，用户程序中的块数量将保持在较低的水平。

更多资料可参阅下列各项：

对于 S7-1500 如何在 STEP 7(TIA 博途)中声明计时器和计数器?https://support.industry.siemens.com/cs/ww/en/view/675852203.2.6 作为参数的实例传递(V14)

被调用块的实例可以被定义为 InOut 参数。

优势

可以创建标准化的函数，其动态实例被传递。只有在调用块的时候才会指定使用哪个实例。

3.2.7 全局数据块(DB)

变量数据位于整个用户程序可用的数据块中。
优势

结构良好的存储区域。访问速度快。

属性

用户程序中的所有块都可以访问全局数据块。全局数据块的结构可以由所有数据类型任意组成。全局数据块可以通过程序编辑器创建，也可以根据之前创建的“用户自定义PLC数据类型”创建。最多可以定义 256 个结构化变量(ARRAY,STRUCT)。这不适用于从 PLC 数据类型派生的变量。

建议

当数据在不同的程序部分或块使用时，使用全局数据块。

更多资料可参阅下列各项：

STEP 7(TIA 博途)中全局数据块的声明表是如何结构化的?https://support.industry.siemens.com/cs/ww/en/view/68015630。

3.2.8 下载但不重新初始化

为了改变已经在控制器中运行的用户程序，S7-1200(固件 V4.0)和 S7-1500 控制器 提供了在运行过程中扩展优化函数块或数据块接口的选项。您可以在不将控制器设 置为 STOP 的情况下加载更改的块，也不会影响已经加载的变量的实际值。
在控制器处于 RUN 模式时，执行以下步骤。 1. 启用“下载但不重新初始化”。 2. 在现有块中插入新定义的变量。 3. 加载块到控制器中。

优势

• 重新加载新定义的变量，不中断运行过程。控制器保持“RUN”模式。

属性

下载但不重新初始化只适用于优化的块。初始化新定义的变量。现有的变量保留其当前值。一个有预留的块在控制器中需要更多的内存空间。内存储备取决于控制器的工作内存。然而，最大为 2 MB。假设已经为了块定义了内存预留。默认下，内存预留为 100 byte。内存预留是为每个块单独定义的。块可以被可变地扩展。

建议

为调试期间要扩展的块(例如测试块)定义内存储备。由于现有变量的实际值仍然存在，因此调试过程不会受到下载的干扰。

请参阅以下条目：

STEP 7-1500(TIA 博途)中全局数据块的声明表是如何结构化的?https://support.industry.siemens.com/cs/ww/en/view/68015630。

3.2.9 块的可重用性

块概念提供了许多以结构化和有效的方式进行编程的选项。

优势

块可以普遍用于用户程序的任何位置。块可以在不同的项目中普遍使用。当每个块接收到一个独立的任务时，一个清晰的、结构良好的用户程序就会自动创建。

显著减少的错误来源。可以进行简单的错误诊断。

建议

如果您想重复使用该块，请注意以下建议：

总是将块视为封装的功能。也就是说，每个块代表整个用户程序中完成的部分任务。

使用多个循环主 OB 块对工厂部件进行分组。总是通过它的接口而不是实例来执行数据交换。不使用项目特定数据，避免以下块内容：

– 访问全局数据块和使用单一背景数据块
– 访问变量
– 访问全局常量。

可重复使用的块与库的专有知识保护块有相同的需求。这就是为什么您必须基于“多重实例能力”块属性检查块的可重用性。在检查之前编译代码块。

3.2.10 块的自动编号

对于内部程序，所需块的编号由系统自动分配(在块属性中设置)。

优势

冲突的块号，例如，由于复制导致的冲突会在 TIA 博途的编译期间自动删除。

建议

保持现有设置“自动的”不变。

FB 和 FC 有三种不同的接口类型: In、InOut 和 Out。通过这些接口类型，参数被提供给块。参数被处理并在块中再次输出。InOut参数用于将数据传输到被调用块以及返回结果。数据的参数传输有两种不同的选项。

3.3 块的接口类型

3.3.1 按值调用

调用块时，实际参数的值被复制到块的形参上。为此，在被调用块中提供额外的内存。

属性

每个块显示与传输的参数相同的行为。调用块时复制值。

3.3.2 按引用调用

当调用该块时，一个引用被传递到实际参数的地址。为此，不需要额外的内存。

属性

每个块显示与引用的参数相同的行为。实际参数在块被调用时被引用，即访问时，直接读取或写入实际参数的值。

建议

通常使用 InOut 接口类型的结构化变量(如 ARRAY, STRUCT, STRING, type…)，以避免不必要地扩大所需的数据内存。

3.3.3 参数传递概述

3.4 块的接口类型当调用块时传输具有“非优化访问”属性的优化数据时，它通常作为副本传输。当块包含许多结构化参数时，这可能会迅速导致块的临时存储区域(本地数据栈)溢出。这可以通过为两个块设置相同的访问类型来避免。

对于 STEP 7，全局存储区域和本地存储区域之间通常存在差异。全局存储区域对于用户程序中的每个块都是可用的。本地存储区域仅在各自的块内可用。

3.4.1 块接口的数据交换

如果您封装函数并仅通过接口对块之间的数据交换进行编程，那么您显然具有优势。

优势

程序可以模块化地由带有部分任务的现成模块组成。程序易于扩展和维护。由于没有隐藏的交叉访问，程序代码更容易阅读和测试。

建议

如果可能的话，只使用本地变量。因此，您可以普遍地以模块化的方式使用这些块。

通过块接口(In, Out, InOut)使用数据交换，从而保证块的可重用性。只使用背景数据块作为各自功能块的本地存储。其他块不应该写入背景数据块。

如果只使用块接口进行数据交换，可以保证所有块都可以独立使用。

3.4.2 全局存储

当存储可以从用户程序的任何位置访问时，就称为全局存储。有硬件相关的存储(例如：位存储、时间、计数器等)和全局数据块。对于依赖于硬件的存储区域，存在这样的危险：程序可能无法移植到任何控制器，因为那里的区域可能已经被使用了。这就是为什么应该使用全局数据块而不是依赖于硬件的存储区域。

优势.

用户程序可以通用使用，独立于硬件。用户程序模块化配置，无需为不同用户划分位存储区域。优化的全局数据块显然比因为兼容性原因而没有优化的位存储区更强大。

建议

不要使用任何位存储区，而是使用全局数据块。避免硬件依赖的内存，例如，时钟存储器或计数器。在多重实例中使用 IEC 计 数器和计时器。IEC计时器可以在“指令-基本指令-定时器操作”中找到。

3.4.3 本地存储

静态变量 • 临时变量

如果值是需要在下一个周期使用使用静态变量。使用临时变量作为当前周期的中间存储。临时变量的访问时间比静态变量短。如果一个 Input/Output 变量被频繁访问，使用一个临时变量作为中间存储来节省运行时间。

优化块：在每次块调用中使用默认值(S7-1500/S7-1200 固件 V4 或更高版本)初始化临时变量。非优化的块：临时变量在块的每次调用时都没有定义。

3.4.4 存储区域访问速度

STEP 7 提供不同的存储访问选项。由于系统相关的原因，对不同存储区域的访问有快有慢。

由高到低的 S7-1200/1500 访问速度

1. 优化块:临时变量，FC 和 FB 参数，非保持型静态变量，变量[PLC数据类型]。
2. 对编译的访问权限已知的优化块：
– 保持型 FB 变量。
– 优化的全局数据块。
3. 对非优化块的访问。
4. 在运行时计算数组索引的间接寻址(例如 Motor [i])。
5. 需要在运行时进行检查的访问。
– 访问运行时创建或间接打开的数据块(例如 OPN DB[i])。
– 寄存器访问或间接内存访问。
6. 在优化块和非优化块之间复制结构(字节数组除外)。

3.5 保持性

在电源故障的情况下，控制器用其缓冲能量将保持数据从控制器的工作存储器复制到非易失性存储器。重新启动控制器后，使用保持的数据恢复程序进程。根据不同的控制器，可保持的数据量大小不同。

优势

保持性数据在控制器从 STOP 到 RUN 或在电源故障和控制器重启的情况下保持其值。

属性

对于优化的数据块的基本变量，可单独设置保持性。非优化数据块只能定义为完全保持或非保持。

保持性数据可以通过“内存复位”或“重置为出厂设置”的操作清除：

控制器的工作开关(MRES) • 控制器显示屏 • 通过 STEP 7(TIA 博途)在线操作

建议

不要使用“在 IDB 中设置”。保持性数据总是设置在功能块中，而不是在背景数据块中。

“IDB 中的设置”增加程序序列的处理时间。总是在 FB 的接口中选择“非保持”或“保持”。

示例: 保持性 PLC 变量

保持数据的设置在 PLC 变量表、功能块、数据块中进行。

示例: 保持性计数器

你也可以声明函数(计时器,计时器等)的实例的保持性。

如果 PLC 上的保持内存不足，则可以以数据块的形式存储数据，这些数据块只位于 PLC 的装载内存中。

更多资料可参阅下列各项：

如何配置 STEP 7(TIA 博途)中的数据块与 S7-1200 的“仅存储在装载内存中”属性？https://support.industry.siemens.com/cs/ww/en/view/53034113/。

针对 SIMATIC S7-1200 和 S7-1500 的持久数据使用配方功能。https://support.industry.siemens.com/cs/ww/en/view/109479727/。

3.6 符号寻址

3.6.1 符号寻址而非绝对寻址

TIA 博途为符号编程进行了优化。这带来了许多好处。由于使用符号寻址，您可以在编程时不需要关注内部数据存储。控制器负责处理数据的最佳存储位置。因此，您可以完全专注于应用程序任务的解决方案。

优势

通过符号变量名称更容易读取程序。自动更新用户程序中所有使用位置的变量名称。程序数据的内存存储不需要手动管理(绝对寻址)。强大的数据访问功能。不需要手动优化性能或程序大小。自动完成快速符号输入。由于类型安全(所有访问都检查数据类型的有效性)，减少了程序错误。

建议

“不用担心数据的存储”。为每个功能、变量或数据输入“描述性”名称，例如，Pump_boiler_1、heater_room_4等。因此，创建的程序可以简单地读懂，而不需要很多注释。

给所有变量使用了直接的符号名称，然后右键来定义它们。

注意 更多资料可参阅下列条目：

在 STEP 7(TIA 博途)中使用 S7-1500 的符号寻址的优点是什么?https://support.industry.siemens.com/cs/ww/en/view/675989953.

6.2 ARRAY 数据类型和间接寻址访问

ARRAY 数据类型表示由数据类型的多个元素组成的数据结构。ARRAY数据类型适用于存储配方、队列中的物料跟踪、循环过程获取、协议等。

可以通过索引间接访问 ARRAY 中的各个元素 (array ["index”]).

优势

通过 ARRAY 索引轻松访问。不需要复杂的指针创建。能够快速创建和扩展。适用于所有编程语言。

属性

结构化数据类型。由固定数量的相同数据类型的元素组成的数据结构。也可以创建多维ARRAY。可以间接访问运行时变量，并在运行时进行动态索引计算。

建议

使用 ARRAY 进行索引访问，而不是指针(例如 ANY 指针)。这使得程序更容易读懂，因为使用符号 ARRAY 更有意义。

为运行变量使用 DINT 数据类型作为临时变量，以获得最高的性能。用“MOVE_BLK”指令将 ARRAY 的部分复制到另一个 ARRAY 中。使用“GET_ERR_ID”指令来捕获 ARRAY 中的访问错误。

更多资料可参阅下列各项： 在 S7-1500 中如何用变量索引实现一个数组访问?https://support.industry.siemens.com/cs/ww/en/view/67598676
在 STEP 7(TIA 博途)中如何安全地和间接地引址？https://support.industry.siemens.com/cs/ww/en/view/97552147
在 STEP 7 (TIA 博途)中,如何在 S7-1500/S7-1200 中进行"Array of Bool" 和 "Word"之间的数据类型转换?https://support.industry.siemens.com/cs/ww/en/view/108999241

注意

通过形参 Array[*]，可以将可变长度的 Array 传递给函数和函数块。使用 “LOWER_BOUND” 和 “UPPER_BOUND” 指令来确定数组的上下限。

优势

块可以处理不同长度灵活的 Array。基于全符号编程的最佳可读性。不再需要为不同长度的 Array 编写指针程序。

3.6.4 STRUCT 数据类型和 PLC 数据类型

STRUCT 数据类型表示由不同数据类型的元素组成的数据结构。结构的声明在各自的块中执行。

与结构相比，PLC 数据类型在 TIA 博途中基于控制器定义，可以集中更改。所有使用位置都会自动更新。

使用 PLC 数据类型前，在项目导航的“PLC数据类型”文件夹中声明。

优势

PLC 数据类型的变化会自动更新到用户程序中的所有使用位置。通过几个块之间的块接口进行简单的数据交换。在 PLC 数据类型中，可以声明具有定义长度的 STRING 变量。在 TIA V14 中，也可以使用一个全局常量来表示长度(例如 String[LENGTH])。 如果 STRING 变量没有定义长度，则该变量的最大长度为 254 个字符。

属性

PLC 数据类型总是以 WORD 限制结束。 • 请考虑这个系统属性当在 I/O 区域使用结构(见章节 3.6.5 访问具有 PLC 数据类型的 I/O 区域)。使用带有 PLC 数据类型的框架进行通信。为 I/O 使用带有 PLC 数据类型的参数记录。使用非优化块和绝对寻址。

建议

使用 PLC 数据类型来汇总几个相关的数据，例如，框架或电机数据(设定值，速 度，旋转方向，温度等)。

在用户程序的多种用途中，总是使用 PLC 的数据类型而不是结构。使用 PLC 的数据类型构造数据块。使用 PLC 的数据类型来指定数据块的结构。PLC数据类型可用于任意数量的数据块。您可以轻松方便地创建任意数量的相同结构的数据块，并在 PLC 数据类 型上集中调整它们。

更多信息可以在以下条目中找到：

适用于 STEP 7 (TIA Portal) 和 SIMATIC S7-1200/S7-1500 的 PLC 数据类型 (LPD) 库 https://support.industry.siemens.com/cs/ww/en/view/109482396。

如何将结构初始化为 S7-1500 STEP 7(TIA 博途)的优化内存区域?https://support.industry.siemens.com/cs/ww/en/view/78678760。

如何为 S7-1500 控制器创建 PLC 数据类型？https://support.industry.siemens.com/cs/ww/en/view/67599090。

在 STEP 7(TIA 博途)中，您如何应用自己的数据类型(UDT)?https://support.industry.siemens.com/cs/ww/en/view/67582844。

对于 S7-1500，为什么当调用一个功能块时应该使用整个结构代替大量的单个元 素来传递参数？https://support.industry.siemens.com/cs/ww/en/view/67585079。

3.6.5 访问具有 PLC 数据类型的 I/O 区域

使用 S7-1500 控制器，您可以创建 PLC 数据类型，并使用它们进行结构化和符号访问输入和输出。

1. PLC 数据类型，包含所有需要的数据。 
2. 创建的 PLC 数据类型的 PLC 变量类型和 I/O 数据区域的起始地址(%Ix.0或%Qx.0，例如%I0.0，%Q12.0…)。
3. 将 PLC 变量作为实际参数传递到功能块。 
4. 功能块的输出类型为创建的 PLC 数据类型。

优势

编程效率高。PLC 数据类型易于多种可用性。

建议

使用 PLC 数据类型访问 I/O 区域，例如，符号性地接收和发送驱动器报文。

注意

在用户程序中也可以直接访问一个 PLC 数据类型变量中的各个元素。

3.6.6 片段访问

对于 S7-1200/1500 控制器，可以访问 Byte、Word、DWord 或 LWord 数据类型变量的存储区。将一个存储区域(如 byte 或 word)划分为一个较小的存储区域(如Bool)也称为片段。下图显示了对操作数的 bit、byte 和 word 的访问。

优势

编程效率高。在变量声明中不需要额外的定义。易于访问(例如控制位)。

建议

使用 AT 结构的片段访问，而不是访问操作数中的某些数据区域。

更多信息可以在以下条目中找到：

在 STEP 7 (TIA 博途) 中，您如何以符号的方式逐位、逐字节或逐字访问非结构化数据类型？https://support.industry.siemens.com/cs/ww/en/view/57374718。

您可以在 LAD 和 FBD 中使用 SCL 网络进行计算编程，而其他编程在 LAD 和 FBD 指令中进行。

优势，通过高效编程节省时间。

3.7 库

使用 TIA Portal，您可以从不同的项目元素建立独立的库，这些库可以轻松重复使用。

优点

在 TIA Portal 中组态配置的数据的简单存储：完整的设备（控制器、HMI、驱动器等）。块、变量表、PLC 数据类型、监视表等。HMI 画面、HMI 变量、脚本等。

通过库进行跨项目交互。库元素的集中更新功能。库元素的版本控制通过系统支持的依赖关系考虑使用控制块时更少的错误源。

建议

创建模板副本以轻松重复使用块、硬件配置、HMI画面等。为系统支持的可重用性库元素创建类型：

– 块的版本控制 
– 所有使用位置的集中更新功能

使用全局库与其他用户进行交互，或作为多个用户同时使用的中央存储。配置全局库的存储位置，以便在启动 TIA Portal 时自动打开。

注意 更多信息可以在以下条目中找到：

STEP 7(TIA 博途)和 WinCC(TIA 博途)的哪些元素可以作为类型或主副本存储在 库中？https://support.industry.siemens.com/cs/ww/en/view/109476862。

如何在 STEP 7(TIA 博途) 中打开具有读写访问权限的全局库？https://support.industry.siemens.com/cs/ww/en/view/37364723。

3.7.1 库类型和库元素

通常有两种不同类型的库：“项目库”、“全局库”。
(1) “项目库”
–集成在项目中，与项目一起管理
–允许项目内可重复使用。
(2) “全局库”
–独立库。
–可在多个项目中使用。
内容由两种存储类型组成：“类型” 、“模板副本”。
(3) “模板副本”
– 库中配置元素的副本（例如块、硬件、PLC变量表等）。
– 副本不与项目中的元素相关联。
– 模板副本也可以由几个配置元素组成。
(4) “类型”
– 类型与您在项目中的使用位置相关联。当类型发生变化时，项目中的使用位置可以自动更新。
– 支持的类型是控制块（FC、FB）、PLC 数据类型、HMI 画面、HMI faceplate、HMI UDT、脚本）。
– 下级元素是自动类型化的。
– 类型是版本化的：可以通过创建更新的版本来进行更改。
– 控制器中只能有一个已使用类型的版本。

3.7.2 类型概念

类型概念允许创建可在多个工厂或机器中使用的标准化自动化功能。类型概念提供了版本控制和更新功能。可以在用户程序中使用库中的类型。
优点

项目中所有使用位置的集中更新
• 不可对类型的使用位置进行不必要的修改。
• 系统通过阻止不需要的删除操作来保证类型始终保持一致。
• 如果一个类型被删除，用户程序中的所有使用位置都会被删除。

特性

通过使用类型，可以集中进行更改并在整个项目中更新它们。

• 始终标记类型以便更好地识别

更改类型

操作说明

1.右键单击“项目库”中的块并选择“编辑类型”
2.选择将哪个控制器用作测试环境，然后单击“确定”确认对话框。如果项目中有多个控制器使用选定的块，则必须选择一个控制器作为测试环境。
3.块打开。一个新版本的块被创建。
4.添加输入变量。在这个地方，您可以选择通过将项目加载到控制器上来测试块上的更改。完成测试块后，继续执行以下步骤。
5.点击“发布版本”按钮。
6.一个对话框打开。在这里您可以存储与版本相关的注释。单击“确定”确认对话框。如果项目的不同控制器中有块的多个使用位置，可以同时更新：“更新项目中的实例”。

如果不再需要旧版本的元素，您可以通过单击“从库中删除未使用的类型版本”来删除它们。

3.8 提高硬件中断的性能

用户程序的处理可能会受到硬件中断等事件的影响。当您需要控制器对硬件事件（例如数字输入模块通道的上升沿）做出快速响应时，组态硬件中断。对于每个硬件中断，可以编写一个单独的OB。发生硬件中断时，控制器的操作系统会调用此OB。因此，控制器的循环被中断，在处理硬件中断后将继续。
对事件（上升沿、下降沿等）的快速系统响应。每个事件都可以启动一个单独的OB。

建议

使用硬件中断以便对硬件事件的快速响应进行编程。尽管编程了硬件中断，但如果系统响应速度还是不够快，可以进一步加快响应速度。在模块中设置尽可能小的“输入延迟”。只有在输入延迟已过时，才会对事件做出响应。输入延迟用于过滤输入信号，例如，补偿诸如抖动的故障。

3.9 其他性能建议

请注意以下有关对 S7-1200/1500 控制器进行编程以实现高性能的建议： • LAD/FBD：禁用块的“评估 ENO”。这避免了运行时的测试。 • STL：不要使用寄存器，因为 S7-1500 出于兼容性原因才模拟地址和数据寄存器。

更多信息可以在以下条目中找到： 如何禁用指令的 ENO 使能输出？ https://support.industry.siemens.com/cs/ww/en/view/67797146
如何提高 STEP 7(TIA 博途)和 S7-1200/S7-1500 CPU 的性能？ https://support.industry.siemens.com/cs/ww/en/view/37571372

3.10 SCL 编程语言：提示和技巧

3.10.1 使用调用模板

编程语言的许多指令都提供了一个调用模板，其中包含现有形式参数的列表。

调用模板的简单扩展。
操作说明
1.将指令从库中拖到 SCL 程序中。编辑器显示完整的调用模板。
2.现在填写所需的参数“CU”和“PV”并使用“返回”按钮完成输入。
3.编辑器会自动折叠调用模板。
4.如果想稍后再次编辑完整的调用，请按以下步骤操作。在任意位置点击进入调用，然后点击“CTRL+SHIFT+SPACE”。现在处于“调用模板”模式。编辑器再次展开调用。可以使用“TAB”按键浏览参数。
5.注意：在“调用模板”模式下，文字为斜体。

3.10.2 哪些指令参数是强制性的？

如果正在展开调用模板，颜色编码将立即向您显示指令的哪些形式参数是可选的，哪些不是。强制参数标记为黑色。

3.10.3 使用整个变量名称进行拖放

在 SCL 编辑器中，您还可以使用拖放功能。对于变量名称，也支持拖放。如果您想用另一个变量替换另一个，请执行以下操作。

SCL 代码可以用关键字 REGION 划分为不同区域。这些区域可以命名，也可以折叠和展开。

优点

更好的总览 • 即使在大型块中也能轻松定位 • 准备好的代码片段可以折叠。

特性

区域可以嵌套。

建议

使用关键字 REGION 来构建 SCL 块。

3.10.5 正确使用 FOR、REPEAT 和 WHILE 循环

循环的使用有不同的版本和应用程序。以下示例显示了差异。

FOR 循环属性：

FOR 循环经过定义的运行次数。循环变量在开始时被分配一个起始值。之后，它以指定的步长递增到每个循环运行的最终值。

出于性能的原因，开始值和结束值在开始时计算一次。因此，循环变量不再影响循环代码。

语法

FOR statCounter : = statStartCount TO statEndCount DO

FOR statCounter : = statStartCount TO statEndCount DO

使用 EXIT 命令可以随时中断循环。

WHILE 循环属性：

WHILE 循环由终止条件结束。在循环代码开始之前检查终止条件。即，如果条件没有满足，则不执行循环。可以为循环代码中的下一次运行调整每个变量。

语法

WHILE condition DO

WHILE condition DO

REPEAT 循环由终止条件结束。在循环代码的末尾检查终止条件。这意味着循环至少运行一次。可以为循环代码中的下一次运行调整每个变量。

建议

如果明确定义了循环变量，请使用 FOR 循环。如果在循环处理期间必须调整循环变量，请使用 WHILE 或 REPEAT 循环。

3.10.6 高效地使用 CASE 指令

使用 SCL 中的 CASE 指令，它将准确地跳转到选定的 CASE 块条件。执行 CASE 块后，指令完成。例如，这使您可以更具体、更轻松地检查经常需要的值范围。

CASE 指令也适用于 CHAR、STRING 数据类型以及元素。

3.10.7 不能操作循环计数器的 FOR 循环

SCL 中的 FOR 循环是纯计数器循环，即在进入循环时迭代次数是固定的。在 FOR 循环中，循环计数器不能更改。

使用 EXIT 指令可以随时中断循环。

优点

编译器可以更好地优化程序，因为它不知道迭代次数。

3.10.8 FOR 向后循环

在 SCL 中，您还可以向后或以另一个步宽递增 FOR 循环的索引。为此，请在循环头中使用可选的“BY”关键字。

如果您将“BY”定义为“-2”，则计数器在每次迭代中减2。如果省略“BY”，则“BY”的默认设置为1

3.10.9 轻松创建调用实例

如果您更喜欢使用键盘工作，可以很简单地在 SCL 中为块创建实例。

3.10.10 时间变量的处理

可以像计算普通数字一样在 SCL 中计算时间变量，即不需要寻找额外的函数，例如T_COMBINE，但可以使用简单的算术。这种方法被称为“操作数重载”。SCL编译器会自动使用合适的函数。可以对时间类型使用合理的算法，因此可以更有效地编程。

示例

time difference := time stamp_1 - time stamp_2;

time difference := time stamp_1 - time stamp_2;

3.10.11 不必要的 IF 指令

程序员经常在 IF-THEN-ELSE 指令中思考。这经常导致程序中不必要的构造。

示例

IF (statOn1 = TRUE AND statOn2 = TRUE) THEN statMotor := TRUE; ELSE statMotor := FALSE;

END_IF

建议

请记住，对于布尔请求，直接分配通常更有效。整个结构可以用一行编程。

示例

statMotor : = statOnl AND statOn2;

statMotor : = statOn1 AND statOn2;

4 独立于硬件的编程 

4.1 S7-300/400 和 S7-1200/1500 的数据类型。

为了确保一个块可以在所有控制器上使用而无需任何进一步的调整，重要的是不要使用硬件相关的功能和属性。

4.2 不使用位存储器而使用全局数据块

优点

• 优化的全局 DB 显然比仅出于兼容性原因而未优化的位存储器地址区域更强大。

建议

• 使用位存储器处理（包括系统和时钟标志）是有问题的，因为每个控制器的位存储器区域的大小是不同的。不要使用位存储器进行编程，而是始终使用全局数据块。这才是程序可以普遍使用的方式。

4.3 “循环位”编程

建议

对于时钟存储器的编程，硬件配置必须始终正确。

使用编程实现时钟发生器的程序块。您可以在下面看到一个使用 SCL 编程语言的时钟发生器的编程示例：https://support.industry.siemens.com/cs/ww/en/view/109479728


5 TIA 博途中的 STEP 7 Safety

5.1 介绍

TIA 博途 V13 SP1 或更高版本支持故障安全 S7-1200F 和 S7-1500F CPU。在这些控制器中，标准和故障安全编程可以在一个设备中进行。使用 SIMATIC STEP 7 Safety（TIA 博途）选件包对故障安全用户程序进行编程。

优点

使用工程工具：TIA 博途，对标准和故障安全程序中进行统一编程 • 熟悉的编程语言 LAD 和 FBD • 统一的诊断和在线功能

故障安全并不意味着程序不包含错误。程序员负责正确的编程逻辑。故障安全意味着确保控制器中的故障安全用户程序正确处理。

5.4 F-运行组

安全程序始终在具有定义周期的 F 运行组中处理。F 运行组由一个“故障-安全组织块”组成，该块称为“主安全块”。所有用户编写的安全功能块被“主安全块”调用。

优点

运行组可以在“安全管理”中简单地创建和配置。 • 运行组中的 F 块是自动创建的。

特性

• 最多可以创建两个 F 运行组。

5.5 F 签名

每个 F 组件（站、I/O、块）都有唯一的 F 签名。使用 F 签名可以快速检测 F 设备配置、F块或完整站是否仍与原始配置或编程一致。

优点

• 简单快速地比较 F 块和 F 设备配置

特性

F 参数签名（没有 F-I/O 的地址）… – 只能通过调整参数来改变。 – PROFIsafe地址改变时保持不变。但是，该站的集体 F 签名发生了变化。

只有当 F 块中的逻辑发生变化时，F 块签名才会改变。 • 更改以下内容 F 块签名保持不变

– 块编号 – 块接口 – 块版本

5.6 在 F-I/O 上分配 PROFIsafe 地址

“安全管理”编辑器中的站的 F 集体签名 “安全管理”编辑器中的 F 块签名（也可以从块的属性中读取） “设备和网络”中“设备视图”中的 F 参数签名

对于 S7-1500F 控制器，可以直接在安装的显示屏或集成的 Web 服务器上读取所 有 F 签名。

在 F-I/O 上分配 PROFIsafe 地址

每个 F-I/O 设备都有一个 PROFIsafe 地址，用于识别和与 F 控制器通信。分配 PROFIsafe 地址时，可以进行两种不同的配置。

• 更换 F 模块无需重新分配 ET 200MP 和 ET 200SP 的 PROFIsafe 地址。在模块 更换期间，智能编码元件保留在基座中。

由于 TIA 博途指示 PROFIsafe 地址警告分配错误，因此配置简单。 • 一个 ET 200SP 的所有 F 模块的 PROFIsafe 地址可以同时分配。

注意 关于为 F-I/O 分配 PROFIsafe 地址的更多信息，请访问：

SIMATIC 工业软件 SIMATIC 安全 – 组态和编程 https://support.industry.siemens.com/cs/ww/en/view/54110126。

5.7 F-I/O 评估

F-I/O 的所有当前状态都保存在 F-I/O 块中。在安全程序中，状态可以被评估和处理。S7-1200F/1500F 和 S7-300F/400F 之间存在以下差异。

5.8 值状态(S7-1200F/1500F)

除了诊断消息以及状态和错误显示外，F 模块还提供有关每个输入和输出信号有效性 的信息 - 值状态。值状态的存储方式与过程映像中输入信号的存储方式相同：值状态通知相应通道值的有效性。

5.9 数据类型

1：通道输出一个有效的过程值。0：通道输出一个替代值。

值状态被附加到输入和输出模块的输入过程映像中。 一个 F-I/O 的通道值和值状态只能被同一个 F 运行组访问。

建议
为提高可读性，将结尾设定为“VS”，例如“TagIn1VS”作为值状态的符号名称。

有关所有 ET 200SP 模块的值状态的更多信息，请访问：

故障安全 CPU - 手册 https://support.industry.siemens.com/cs/ww/en/ps/13719/man。

故障安全 I/O 模块 - 手册 https://support.industry.siemens.com/cs/ww/en/ps/14059/man。

5.9 数据类型

5.9.2 隐式转换

在与安全相关的应用中，可能需要使用不同数据类型的变量执行数学函数。为此所需的功能块需要形式参数来定义数据格式。如果操作数不符合预期的数据类型，则必须先进行转换。

在以下情况下，S7-1200/1500 也可以隐式执行数据转换：数据类型具有相同的长度。

因此，以下数据类型可以在安全程序中隐式转换：

WORD ↔ INT 
DINT ↔ TIME

一个实际的应用是两个时间值的相加，尽管函数“Add”需要作为“DInt”输入。结果也作为“时间”变量输出。

5.10 F-compliant 型 PLC 数据类型

对于安全程序，也可以使用 PLC 数据类型优化数据结构。

优点

• PLC 数据类型的更改会自动更新到用户程序的所有使用位置。

特性

F-PLC 数据类型的声明和使用方式与 PLC 数据类型相同。
• 作为 F-PLC 数据类型，安全程序中允许的所有数据类型都可以使用。
• 不支持 F-PLC 数据类型在其他 F-PLC 数据类型中嵌套。
• F-PLC 数据类型既用于安全程序，也可用于标准用户程序。

建议

• 使用 F-PLC 数据类型访问 I/O 区域。

这里必须遵守以下规则：

– F PLC 数据类型的变量结构必须与 F-I/O 的通道结构相匹配。
– 例如，符合 F 的 PLC 数据类型，具有 8 个通道的 F-I/O：
8 个 BOOL 变量（通道值）或 • 16 个 BOOL 变量（通道值 + 值状态）
– 只有激活的通道才允许访问 F-I/O。当组态 1oo2 (2v2)评估时，较高的通道始终是失效的。

安全程序中“TRUE”和“FALSE”信号的使用可分为两种应用情况：
• 作为块的实际参数
• 作为对操作的分配

块的实际参数

对于 S7-1200F/1500F 控制器，您可以使用布尔常量“FALSE”表示 0，“TRUE” 表示 1 作为实际参数，以便在安全程序中的块调用期间提供给形式参数。只有关键字“FALSE”或“TRUE”被写入形式参数。

要为操作创建“TRUE”或“FALSE”信号，请执行以下操作：
1. 创建两个 BOOL 类型的静态变量“statTrue”和“statFalse”。
2. 将默认值“false”分配给“statFalse”变量。
3. 将默认值“true”分配给“statTrue”变量。

您可以在完整的功能块中使用变量作为“True”和“False”读取信号。

5.12 优化编译和程序运行

安全程序的一个重要部分是通过编码处理对用户编程进行保护。目的是发现安全程 序中的任何类型的数据损坏，从而防止出现不安全的情况。

该保护程序是在编译期间创建的，因此会延长编译时间。F-CPU 的运行时间也会因 保护程序而延长，因为 F-CPU 会进行将结果与用户程序进行比较的额外处理。系统自动生成的保护程序可以在 F-CPU 的系统块文件夹中找到。

5.12.1 避免时间处理块：TP、TON、TOF

每个时间处理块（TP、TON、TOF）都需要保护代码中的附加块和全局数据更正。

建议

尽可能少地使用这些块。

5.12.2 避免深层调用层次结构

深层调用层次结构扩大了系统创建的 F 块的代码，因为需要更大范围的保护功能和测试。当嵌套深度超过 8 时，TIA博途将在编译期间发出警告。

构建的程序避免不必要的深层调用层次结构的方式。

5.12.3 避免 JMP/LABEL 结构

如果通过 JMP/LABEL 跳转块调用，则会在系统侧的 F 块中产生额外的保护。这里，必须对跳过的块调用执行校正码。这会在编译中消耗性能和时间。

尽量避免 JMP/LABEL 结构，以减少系统侧的 F-block。

5.13 标准程序与 F 程序之间的数据交换

在某些情况下，需要在安全程序和标准用户程序之间交换数据。为了保证标准和安全程序之间的数据一致性，应格外注意以下建议。

建议

• 不通过位存储器进行数据交换（参见章节 4.2 不使用位存储器而使用全局数据块）

• 将安全程序和标准用户程序之间的访问集中在两个标准 DB 上。因此，标准程序的更改不会影响安全程序。控制器也不需要处于 STOP 模式来加载标准程序。

5.14 测试安全程序

除了标准用户程序的始终可控数据之外，还可以在禁用的安全模式下更改安全程序的以下数据。

特性

只有在 F -CPU RUN 模式下才能控制 F I/O。
• 从监视表中可以控制在一个安全程序中的最多 5 个输入/输出。
• 可以使用多个监视表。 
• 作为触发点，需要为“循环开始”或“循环结束”设置“永久”或“一次”。
• F-I/O 不能强制。 • 如果仍希望使用断点进行测试，则需要事先停用安全模式。这会导致以下错误：
– 与 F-I/O 通信时出错 。
– 故障安全 CPU-CPU 通信错误。

5.15 发生 F 错误时的 STOP 模式

在以下情况下，会触发 F-CPU 的 STOP 模式： 
• 不得在“系统块”文件夹中添加、更改或删除任何块。 
• 不得对未在安全程序中调用的 F-FB 的背景 DB 进行任何访问。 
• 不得超过“F 运行组的最大循环时间”。在 F 运行组的两次调用之间最多可以选择为“F运行组的最大循环时间”（最大 20000 ms）。
• 如果从未运行的运行组的 F 运行组通信的 DB 中读取变量（未调用 F 运行组的主 安全块）。不允许在线和离线编辑 F-FB 的背景 DB 中的起始值，这会导致 F-CPU 停止。
• 主安全块不能包含任何参数，因为它们无法提供。 • F-FC的输出必须始终进行初始化。

5.16 安全程序的移植

有关移植安全程序的信息，请访问：https://support.industry.siemens.com/cs/ww/en/view/109475826

5.17 有关安全的常规建议

通常，以下建议适用于处理 STEP 7 Safety 和 F 模块。

• 只要有可能，总是使用 F 控制器。因此，可以很容易地实现安全功能的后期扩展。

• 始终使用一个密码的安全程序，以防止未经授权的更改。密码在“安全管理”编辑器中设置。

6 使用用户程序自动生成可视化

6.1 介绍

自 TIA 博途 V14 起，可以使用 SiVArc(SIMATIC Visualization Architect)选件包从可视化库和控制器中的用户程序自动生成工厂的可视化。

使用 SiVArc 生成的优势

具有过程连接的可视化自动生成 
• 用户界面标准化 
• 对操作屏幕进行简单和一致的调整

要求

使用 SiVArc 的基本要求是工厂的高度标准化。将系统模块化为单独的功能组的优势在于，SiVArc可以使用这些功能组从现有的画面库生成操作画面并将其互连。接口的标准化有助于高效工作和可视化的自动生成。

SiVArc 是 HMI 和控制器之间的接口主题。以下链接将让您深入了解 SiVArc 的功能： 
应用示例“SiVArc Getting Started”： https://support.industry.siemens.com/cs/ww/en/view/109740350
SiVArc 手册： https://support.industry.siemens.com/cs/ww/en/view/109755214 
SIMATIC 可视化架构，自动化 HMI 生成： https://support.industry.siemens.com/cs/ww/en/view/109758628

6.2 自动生成的工作原理

在用户程序中调用标准化块，例如用于发动机控制的块。使用所谓的 SiVArc 规则， 可以将调用的块与可视化元素（文本字段、IO域、图像块等）链接起来。

SiVArc 使用规则为每个指定块的调用在图像模板的副本上生成指定的可视化元素。

6.3 控制 HMI 生成器

用于控制 HMI 生成器，有以下选项：
• 禁用特定调用的 SiVArc 生成 
• 根据功能或工厂位置对 SiVArc 生成进行排序
• 为 SiVArc 生成添加更多属性

在 SiVArc 规则中，您可以使用来自控制器的以下信息：
• 网络注释 
• SiVArc 变量

这提供了在控制器中为 SiVArc 提供附加信息的选项，可以将其用作 SiVArc 规则中的条件。

6.3.1 使用网络注释进行控制

在网络注释中，您可以添加有关控制 SiVArc 规则在生成期间搜索的生成器的信息：

在规则编辑器中，使用“条件”列中的“包含”功能并搜索信息，例如“包含（Block.NetworkComment，“字符串”）”。使用此功能，就有了一个自由的设计框架来限制规则的执行，或仅对某些网络执行规则。

建议

在网络注释中清楚地标记 SiVArc 生成的信息，例如“SiVArc :Generate True”。

6.3.2 使用 SiVArc 变量进行控制

可以为设备中的每个网络定义特殊的 SiVArc 变量，并在 SiVArc 规则中使用这些变量。

要创建 SiVArc 标签，请执行以下操作： 
1. 打开块。 
2. 切换到检查窗口中的“插件”选项卡。 
3. 对于每个网络，在“名称”列中输入变量的名称，在“值”列中输入字符串类型的值。

在规则编辑器中，您可以使用表达式“变量名称” = “值”查询 SiVArc 变量，从而影响规则的执行。

在规则编辑器中，在“条件”列中输入 SiVArc 变量，例如“Location” = “Bottling West”。

建议

使用通用变量名称来控制生成器以简化规则创建。

6.4 附加建议

仅使用 WinCC 支持的字符来指定变量。

生成图像时， SiVArc 访问数据块、变量或网络注释的标识符。SiVArc 删除 WinCC 不支持的所有字符。这会导致项目的不一致。不支持的字符：

• %,@, ?, ", /, \, <, >, ., :

使用编程语言 FBD 调用块

为了可以通过网络注释或 SiVArc 变量控制生成器，请在编程语言 FBD 中调用要生成可视化元素的块。

注意 此建议适用于并包括 TIA 博途 V15。自 TIA 博途 V15.1 起，也可以使用 SCL 模块。


8.1 服务和支持

工业在线支持

您有任何问题或需要帮助吗？西门子工业在线支持提供全天候访问我们的全部服务和支持知识和产品组合。工业在线支持是有关我们产品、解决方案和服务的信息的中心地址。产品信息、手册、下载、常见问题解答、应用示例和视频 - 只需单击几下鼠标即可访问所有信息：https://support.industry.siemens.com

技术支持

西门子工业的技术支持为您提供有关所有技术查询的快速和有能力的支持，并提供大量定制服务——从基本支持到个人支持合同。请通过 Web 表单向技术支持发送查询：www.siemens.com/industry/supportrequest

SITRAIN – 工业培训

我们为您提供全球可用的工业培训课程，提供实践经验、创新的学习方法和针对客户特定需求量身定制的理念。

有关我们提供的培训和课程及其地点和日期的更多信息，请访问我们的网页： www.siemens.com/sitrain

服务提供

我们的服务范围包括：

工厂数据服务 • 备件服务 • 维修服务 • 现场和维护服务 • 改造和现代化服务 • 服务计划和合同可以在服务目录网页中找到有关我们服务范围的详细信息：

https://support.industry.siemens.com/cs/sc

工业在线支持应用程序

无论您身在何处，通过“西门子工业在线支持”应用程序您都将获得最佳支持。该应用程序适用于 Apple iOS、 Android 和Windows Phone：

https://support.industry.siemens.com/cs/ww/en/sc/2067
